#ifndef __px4_msgs__msg__LandingTargetPose__idl__
#define __px4_msgs__msg__LandingTargetPose__idl__

module px4_msgs
{
  module msg
  {
    module dds
    {

      /**
       * Relative position of precision land target in navigation (body fixed, north aligned, NED) and inertial (world fixed, north aligned, NED) frames
       */
      @TypeCode(type="px4_msgs::msg::dds_::LandingTargetPose_")
      struct LandingTargetPose
      {
        /**
         * time since system start (microseconds)
         */
        unsigned long long timestamp;
        /**
         * Flag indicating whether the landing target is static or moving with respect to the ground
         */
        boolean is_static;
        /**
         * Flag showing whether relative position is valid
         */
        boolean rel_pos_valid;
        /**
         * Flag showing whether relative velocity is valid
         */
        boolean rel_vel_valid;
        /**
         * X/north position of target, relative to vehicle (navigation frame) [meters]
         */
        float x_rel;
        /**
         * Y/east position of target, relative to vehicle (navigation frame) [meters]
         */
        float y_rel;
        /**
         * Z/down position of target, relative to vehicle (navigation frame) [meters]
         */
        float z_rel;
        /**
         * X/north velocity  of target, relative to vehicle (navigation frame) [meters/second]
         */
        float vx_rel;
        /**
         * Y/east velocity of target, relative to vehicle (navigation frame) [meters/second]
         */
        float vy_rel;
        /**
         * X/north position variance [meters^2]
         */
        float cov_x_rel;
        /**
         * Y/east position variance [meters^2]
         */
        float cov_y_rel;
        /**
         * X/north velocity variance [(meters/second)^2]
         */
        float cov_vx_rel;
        /**
         * Y/east velocity variance [(meters/second)^2]
         */
        float cov_vy_rel;
        /**
         * Flag showing whether absolute position is valid
         */
        boolean abs_pos_valid;
        /**
         * X/north position of target, relative to origin (navigation frame) [meters]
         */
        float x_abs;
        /**
         * Y/east position of target, relative to origin (navigation frame) [meters]
         */
        float y_abs;
        /**
         * Z/down position of target, relative to origin (navigation frame) [meters]
         */
        float z_abs;
      };
    };
  };
};

#endif
