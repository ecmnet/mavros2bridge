#ifndef __px4_msgs__msg__InputRc__idl__
#define __px4_msgs__msg__InputRc__idl__

module px4_msgs
{
  module msg
  {
    module dds
    {
      const octet RC_INPUT_SOURCE_UNKNOWN =
      0;

      const octet RC_INPUT_SOURCE_PX4FMU_PPM =
      1;

      const octet RC_INPUT_SOURCE_PX4IO_PPM =
      2;

      const octet RC_INPUT_SOURCE_PX4IO_SPEKTRUM =
      3;

      const octet RC_INPUT_SOURCE_PX4IO_SBUS =
      4;

      const octet RC_INPUT_SOURCE_PX4IO_ST24 =
      5;

      const octet RC_INPUT_SOURCE_MAVLINK =
      6;

      const octet RC_INPUT_SOURCE_QURT =
      7;

      const octet RC_INPUT_SOURCE_PX4FMU_SPEKTRUM =
      8;

      const octet RC_INPUT_SOURCE_PX4FMU_SBUS =
      9;

      const octet RC_INPUT_SOURCE_PX4FMU_ST24 =
      10;

      const octet RC_INPUT_SOURCE_PX4FMU_SUMD =
      11;

      const octet RC_INPUT_SOURCE_PX4FMU_DSM =
      12;

      const octet RC_INPUT_SOURCE_PX4IO_SUMD =
      13;

      const octet RC_INPUT_SOURCE_PX4FMU_CRSF =
      14;

      const octet RC_INPUT_SOURCE_PX4FMU_GHST =
      15;

      /**
       * Maximum number of R/C input channels in the system. S.Bus has up to 18 channels.
       */
      const octet RC_INPUT_MAX_CHANNELS =
      18;

      const octet RSSI_MAX =
      100;


      @TypeCode(type="px4_msgs::msg::dds_::InputRc_")
      struct InputRc
      {
        /**
         * time since system start (microseconds)
         */
        unsigned long long timestamp;
        /**
         * last valid reception time
         */
        unsigned long long timestamp_last_signal;
        /**
         * number of channels actually being seen
         */
        octet channel_count;
        /**
         * receive signal strength indicator (RSSI): < 0: Undefined, 0: no signal, 100: full reception
         */
        long rssi;
        /**
         * explicit failsafe flag: true on TX failure or TX out of range , false otherwise. Only the true state is reliable, as there are some (PPM) receivers on the market going into failsafe without telling us explicitly.
         */
        boolean rc_failsafe;
        /**
         * RC receiver connection status: True,if no frame has arrived in the expected time, false otherwise. True usually means that the receiver has been disconnected, but can also indicate a radio link loss on "stupid" systems. Will remain false, if a RX with failsafe option continues to transmit frames after a link loss.
         */
        boolean rc_lost;
        /**
         * Number of lost RC frames. Note: intended purpose: observe the radio link quality if RSSI is not available. This value must not be used to trigger any failsafe-alike functionality.
         */
        unsigned short rc_lost_frame_count;
        /**
         * Number of total RC frames. Note: intended purpose: observe the radio link quality if RSSI is not available. This value must not be used to trigger any failsafe-alike functionality.
         */
        unsigned short rc_total_frame_count;
        /**
         * Length of a single PPM frame. Zero for non-PPM systems
         */
        unsigned short rc_ppm_frame_length;
        /**
         * Input source
         */
        octet input_source;
        /**
         * measured pulse widths for each of the supported channels
         */
        unsigned_short values[18];
        /**
         * link quality. Percentage 0-100%. -1 = invalid
         */
        octet link_quality;
        /**
         * Actual rssi in units of dBm. NaN = invalid
         */
        float rssi_dbm;
      };
    };
  };
};

#endif
