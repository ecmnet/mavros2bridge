#ifndef __px4_msgs__msg__VehicleLocalPosition__idl__
#define __px4_msgs__msg__VehicleLocalPosition__idl__

module px4_msgs
{
  module msg
  {
    module dds
    {
      const octet DIST_BOTTOM_SENSOR_NONE =
      0;

      /**
       * (1 << 0) a range sensor is used to estimate dist_bottom field
       */
      const octet DIST_BOTTOM_SENSOR_RANGE =
      1;

      /**
       * (1 << 1) a flow sensor is used to estimate dist_bottom field (mostly fixed-wing use case)
       */
      const octet DIST_BOTTOM_SENSOR_FLOW =
      2;


      /**
       * Fused local position in NED.
       * The coordinate system origin is the vehicle position at the time when the EKF2-module was started.
       */
      @TypeCode(type="px4_msgs::msg::dds_::VehicleLocalPosition_")
      struct VehicleLocalPosition
      {
        /**
         * time since system start (microseconds)
         */
        unsigned long long timestamp;
        /**
         * the timestamp of the raw data (microseconds)
         */
        unsigned long long timestamp_sample;
        /**
         * true if x and y are valid
         */
        boolean xy_valid;
        /**
         * true if z is valid
         */
        boolean z_valid;
        /**
         * true if vx and vy are valid
         */
        boolean v_xy_valid;
        /**
         * true if vz is valid
         */
        boolean v_z_valid;
        /**
         * Position in local NED frame
         * North position in NED earth-fixed frame, (metres)
         */
        float x;
        /**
         * East position in NED earth-fixed frame, (metres)
         */
        float y;
        /**
         * Down position (negative altitude) in NED earth-fixed frame, (metres)
         */
        float z;
        /**
         * Position reset delta
         * Amount of lateral shift of position estimate in latest reset (in x and y) [m]
         */
        float delta_xy[2];
        /**
         * Index of latest lateral position estimate reset
         */
        octet xy_reset_counter;
        /**
         * Amount of vertical shift of position estimate in latest reset [m]
         */
        float delta_z;
        /**
         * Index of latest vertical position estimate reset
         */
        octet z_reset_counter;
        /**
         * Velocity in NED frame
         * North velocity in NED earth-fixed frame, (metres/sec)
         */
        float vx;
        /**
         * East velocity in NED earth-fixed frame, (metres/sec)
         */
        float vy;
        /**
         * Down velocity in NED earth-fixed frame, (metres/sec)
         */
        float vz;
        /**
         * Down position time derivative in NED earth-fixed frame, (metres/sec)
         */
        float z_deriv;
        /**
         * Velocity reset delta
         * Amount of lateral shift of velocity estimate in latest reset (in x and y) [m/s]
         */
        float delta_vxy[2];
        /**
         * Index of latest vertical velocity estimate reset
         */
        octet vxy_reset_counter;
        /**
         * Amount of vertical shift of velocity estimate in latest reset [m/s]
         */
        float delta_vz;
        /**
         * Index of latest vertical velocity estimate reset
         */
        octet vz_reset_counter;
        /**
         * Acceleration in NED frame
         * North velocity derivative in NED earth-fixed frame, (metres/sec^2)
         */
        float ax;
        /**
         * East velocity derivative in NED earth-fixed frame, (metres/sec^2)
         */
        float ay;
        /**
         * Down velocity derivative in NED earth-fixed frame, (metres/sec^2)
         */
        float az;
        /**
         * Euler yaw angle transforming the tangent plane relative to NED earth-fixed frame, -PI..+PI,  (radians)
         */
        float heading;
        float heading_var;
        /**
         * Same as heading but generated by integrating corrected gyro data only
         */
        float unaided_heading;
        /**
         * Heading delta caused by latest heading reset [rad]
         */
        float delta_heading;
        /**
         * Index of latest heading reset
         */
        octet heading_reset_counter;
        boolean heading_good_for_control;
        float tilt_var;
        /**
         * Position of reference point (local NED frame origin) in global (GPS / WGS84) frame
         * true if position (x, y) has a valid global reference (ref_lat, ref_lon)
         */
        boolean xy_global;
        /**
         * true if z has a valid global reference (ref_alt)
         */
        boolean z_global;
        /**
         * Time when reference position was set since system start, (microseconds)
         */
        unsigned long long ref_timestamp;
        /**
         * Reference point latitude, (degrees)
         */
        double ref_lat;
        /**
         * Reference point longitude, (degrees)
         */
        double ref_lon;
        /**
         * Reference altitude AMSL, (metres)
         */
        float ref_alt;
        /**
         * Distance to surface
         * true if distance to bottom surface is valid
         */
        boolean dist_bottom_valid;
        /**
         * Distance from from bottom surface to ground, (metres)
         */
        float dist_bottom;
        /**
         * terrain estimate variance (m^2)
         */
        float dist_bottom_var;
        /**
         * Amount of vertical shift of dist bottom estimate in latest reset [m]
         */
        float delta_dist_bottom;
        /**
         * Index of latest dist bottom estimate reset
         */
        octet dist_bottom_reset_counter;
        /**
         * bitfield indicating what type of sensor is used to estimate dist_bottom
         */
        octet dist_bottom_sensor_bitfield;
        /**
         * Standard deviation of horizontal position error, (metres)
         */
        float eph;
        /**
         * Standard deviation of vertical position error, (metres)
         */
        float epv;
        /**
         * Standard deviation of horizontal velocity error, (metres/sec)
         */
        float evh;
        /**
         * Standard deviation of vertical velocity error, (metres/sec)
         */
        float evv;
        /**
         * True if this position is estimated through dead-reckoning
         */
        boolean dead_reckoning;
        /**
         * estimator specified vehicle limits
         * maximum horizontal speed - set to 0 when limiting not required (meters/sec)
         */
        float vxy_max;
        /**
         * maximum vertical speed - set to 0 when limiting not required (meters/sec)
         */
        float vz_max;
        /**
         * minimum height above ground level - set to 0 when limiting not required (meters)
         */
        float hagl_min;
        /**
         * maximum height above ground level - set to 0 when limiting not required (meters)
         */
        float hagl_max;
      };
    };
  };
};

#endif
