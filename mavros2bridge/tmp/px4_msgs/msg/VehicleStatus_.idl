#ifndef __px4_msgs__msg__VehicleStatus__idl__
#define __px4_msgs__msg__VehicleStatus__idl__

module px4_msgs
{
  module msg
  {
    module dds
    {
      const octet ARMING_STATE_DISARMED =
      1;

      const octet ARMING_STATE_ARMED =
      2;

      const octet ARM_DISARM_REASON_TRANSITION_TO_STANDBY =
      0;

      const octet ARM_DISARM_REASON_STICK_GESTURE =
      1;

      const octet ARM_DISARM_REASON_RC_SWITCH =
      2;

      const octet ARM_DISARM_REASON_COMMAND_INTERNAL =
      3;

      const octet ARM_DISARM_REASON_COMMAND_EXTERNAL =
      4;

      const octet ARM_DISARM_REASON_MISSION_START =
      5;

      const octet ARM_DISARM_REASON_SAFETY_BUTTON =
      6;

      const octet ARM_DISARM_REASON_AUTO_DISARM_LAND =
      7;

      const octet ARM_DISARM_REASON_AUTO_DISARM_PREFLIGHT =
      8;

      const octet ARM_DISARM_REASON_KILL_SWITCH =
      9;

      const octet ARM_DISARM_REASON_LOCKDOWN =
      10;

      const octet ARM_DISARM_REASON_FAILURE_DETECTOR =
      11;

      const octet ARM_DISARM_REASON_SHUTDOWN =
      12;

      const octet ARM_DISARM_REASON_UNIT_TEST =
      13;

      /**
       * Manual mode
       */
      const octet NAVIGATION_STATE_MANUAL =
      0;

      /**
       * Altitude control mode
       */
      const octet NAVIGATION_STATE_ALTCTL =
      1;

      /**
       * Position control mode
       */
      const octet NAVIGATION_STATE_POSCTL =
      2;

      /**
       * Auto mission mode
       */
      const octet NAVIGATION_STATE_AUTO_MISSION =
      3;

      /**
       * Auto loiter mode
       */
      const octet NAVIGATION_STATE_AUTO_LOITER =
      4;

      /**
       * Auto return to launch mode
       */
      const octet NAVIGATION_STATE_AUTO_RTL =
      5;

      const octet NAVIGATION_STATE_POSITION_SLOW =
      6;

      const octet NAVIGATION_STATE_FREE5 =
      7;

      const octet NAVIGATION_STATE_FREE4 =
      8;

      const octet NAVIGATION_STATE_FREE3 =
      9;

      /**
       * Acro mode
       */
      const octet NAVIGATION_STATE_ACRO =
      10;

      const octet NAVIGATION_STATE_FREE2 =
      11;

      /**
       * Descend mode (no position control)
       */
      const octet NAVIGATION_STATE_DESCEND =
      12;

      /**
       * Termination mode
       */
      const octet NAVIGATION_STATE_TERMINATION =
      13;

      const octet NAVIGATION_STATE_OFFBOARD =
      14;

      /**
       * Stabilized mode
       */
      const octet NAVIGATION_STATE_STAB =
      15;

      const octet NAVIGATION_STATE_FREE1 =
      16;

      /**
       * Takeoff
       */
      const octet NAVIGATION_STATE_AUTO_TAKEOFF =
      17;

      /**
       * Land
       */
      const octet NAVIGATION_STATE_AUTO_LAND =
      18;

      /**
       * Auto Follow
       */
      const octet NAVIGATION_STATE_AUTO_FOLLOW_TARGET =
      19;

      /**
       * Precision land with landing target
       */
      const octet NAVIGATION_STATE_AUTO_PRECLAND =
      20;

      /**
       * Orbit in a circle
       */
      const octet NAVIGATION_STATE_ORBIT =
      21;

      /**
       * Takeoff, transition, establish loiter
       */
      const octet NAVIGATION_STATE_AUTO_VTOL_TAKEOFF =
      22;

      const octet NAVIGATION_STATE_EXTERNAL1 =
      23;

      const octet NAVIGATION_STATE_EXTERNAL2 =
      24;

      const octet NAVIGATION_STATE_EXTERNAL3 =
      25;

      const octet NAVIGATION_STATE_EXTERNAL4 =
      26;

      const octet NAVIGATION_STATE_EXTERNAL5 =
      27;

      const octet NAVIGATION_STATE_EXTERNAL6 =
      28;

      const octet NAVIGATION_STATE_EXTERNAL7 =
      29;

      const octet NAVIGATION_STATE_EXTERNAL8 =
      30;

      const octet NAVIGATION_STATE_MAX =
      31;

      const unsigned short FAILURE_NONE =
      0;

      /**
       * (1 << 0)
       */
      const unsigned short FAILURE_ROLL =
      1;

      /**
       * (1 << 1)
       */
      const unsigned short FAILURE_PITCH =
      2;

      /**
       * (1 << 2)
       */
      const unsigned short FAILURE_ALT =
      4;

      /**
       * (1 << 3)
       */
      const unsigned short FAILURE_EXT =
      8;

      /**
       * (1 << 4)
       */
      const unsigned short FAILURE_ARM_ESC =
      16;

      /**
       * (1 << 5)
       */
      const unsigned short FAILURE_BATTERY =
      32;

      /**
       * (1 << 6)
       */
      const unsigned short FAILURE_IMBALANCED_PROP =
      64;

      /**
       * (1 << 7)
       */
      const unsigned short FAILURE_MOTOR =
      128;

      const octet HIL_STATE_OFF =
      0;

      const octet HIL_STATE_ON =
      1;

      const octet VEHICLE_TYPE_UNKNOWN =
      0;

      const octet VEHICLE_TYPE_ROTARY_WING =
      1;

      const octet VEHICLE_TYPE_FIXED_WING =
      2;

      const octet VEHICLE_TYPE_ROVER =
      3;

      const octet VEHICLE_TYPE_AIRSHIP =
      4;

      const octet FAILSAFE_DEFER_STATE_DISABLED =
      0;

      const octet FAILSAFE_DEFER_STATE_ENABLED =
      1;

      /**
       * Failsafes deferred, but would trigger a failsafe
       */
      const octet FAILSAFE_DEFER_STATE_WOULD_FAILSAFE =
      2;


      /**
       * Encodes the system state of the vehicle published by commander
       */
      @TypeCode(type="px4_msgs::msg::dds_::VehicleStatus_")
      struct VehicleStatus
      {
        /**
         * time since system start (microseconds)
         */
        unsigned long long timestamp;
        /**
         * Arming timestamp (microseconds)
         */
        unsigned long long armed_time;
        /**
         * Takeoff timestamp (microseconds)
         */
        unsigned long long takeoff_time;
        octet arming_state;
        octet latest_arming_reason;
        octet latest_disarming_reason;
        /**
         * time when current nav_state activated
         */
        unsigned long long nav_state_timestamp;
        /**
         * Mode that the user selected (might be different from nav_state in a failsafe situation)
         */
        octet nav_state_user_intention;
        /**
         * Currently active mode
         */
        octet nav_state;
        /**
         * Current mode executor in charge (0=Autopilot)
         */
        octet executor_in_charge;
        /**
         * Bitmask for all valid nav_state values
         */
        unsigned long valid_nav_states_mask;
        /**
         * Bitmask for all modes that a user can select
         */
        unsigned long can_set_nav_states_mask;
        /**
         * Bitmask of detected failures
         */
        unsigned short failure_detector_status;
        octet hil_state;
        /**
         * If it's a VTOL, then the value will be VEHICLE_TYPE_ROTARY_WING while flying as a multicopter, and VEHICLE_TYPE_FIXED_WING when flying as a fixed-wing
         */
        octet vehicle_type;
        /**
         * true if system is in failsafe state (e.g.:RTL, Hover, Terminate, ...)
         */
        boolean failsafe;
        /**
         * true if system is in failsafe state but the user took over control
         */
        boolean failsafe_and_user_took_over;
        /**
         * one of FAILSAFE_DEFER_STATE_*
         */
        octet failsafe_defer_state;
        /**
         * Link loss
         * datalink to GCS lost
         */
        boolean gcs_connection_lost;
        /**
         * counts unique GCS connection lost events
         */
        octet gcs_connection_lost_counter;
        /**
         * Set to true if the high latency data link (eg. RockBlock Iridium 9603 telemetry module) is lost
         */
        boolean high_latency_data_link_lost;
        /**
         * VTOL flags
         * True if the system is VTOL capable
         */
        boolean is_vtol;
        /**
         * True if the system performs a 90Â° pitch down rotation during transition from MC to FW
         */
        boolean is_vtol_tailsitter;
        /**
         * True if VTOL is doing a transition
         */
        boolean in_transition_mode;
        /**
         * True if VTOL is doing a transition from MC to FW
         */
        boolean in_transition_to_fw;
        /**
         * MAVLink identification
         * system type, contains mavlink MAV_TYPE
         */
        octet system_type;
        /**
         * system id, contains MAVLink's system ID field
         */
        octet system_id;
        /**
         * subsystem / component id, contains MAVLink's component ID field
         */
        octet component_id;
        /**
         * Set to true if a safety button is connected
         */
        boolean safety_button_available;
        /**
         * Set to true if safety is off
         */
        boolean safety_off;
        /**
         * set if input power is valid
         */
        boolean power_input_valid;
        /**
         * set to true (never cleared) once telemetry received from usb link
         */
        boolean usb_connected;
        boolean open_drone_id_system_present;
        boolean open_drone_id_system_healthy;
        boolean parachute_system_present;
        boolean parachute_system_healthy;
        /**
         * Set to true if avoidance system is enabled via COM_OBS_AVOID parameter
         */
        boolean avoidance_system_required;
        /**
         * Status of the obstacle avoidance system
         */
        boolean avoidance_system_valid;
        boolean rc_calibration_in_progress;
        boolean calibration_enabled;
        /**
         * true if all checks necessary to arm pass
         */
        boolean pre_flight_checks_pass;
      };
    };
  };
};

#endif
