#ifndef __px4_msgs__msg__ObstacleDistance__idl__
#define __px4_msgs__msg__ObstacleDistance__idl__

module px4_msgs
{
  module msg
  {
    module dds
    {
      const octet MAV_FRAME_GLOBAL =
      0;

      const octet MAV_FRAME_LOCAL_NED =
      1;

      const octet MAV_FRAME_BODY_FRD =
      12;

      const octet MAV_DISTANCE_SENSOR_LASER =
      0;

      const octet MAV_DISTANCE_SENSOR_ULTRASOUND =
      1;

      const octet MAV_DISTANCE_SENSOR_INFRARED =
      2;

      const octet MAV_DISTANCE_SENSOR_RADAR =
      3;


      @TypeCode(type="px4_msgs::msg::dds_::ObstacleDistance_")
      struct ObstacleDistance
      {
        /**
         * Obstacle distances in front of the sensor.
         * time since system start (microseconds)
         */
        unsigned long long timestamp;
        /**
         * Coordinate frame of reference for the yaw rotation and offset of the sensor data. Defaults to MAV_FRAME_GLOBAL, which is North aligned. For body-mounted sensors use MAV_FRAME_BODY_FRD, which is vehicle front aligned.
         */
        octet frame;
        /**
         * Type from MAV_DISTANCE_SENSOR enum.
         */
        octet sensor_type;
        /**
         * Distance of obstacles around the UAV with index 0 corresponding to local North. A value of 0 means that the obstacle is right in front of the sensor. A value of max_distance +1 means no obstacle is present. A value of UINT16_MAX for unknown/not used. In a array element, one unit corresponds to 1cm.
         */
        unsigned_short distances[72];
        /**
         * Angular width in degrees of each array element.
         */
        float increment;
        /**
         * Minimum distance the sensor can measure in centimeters.
         */
        unsigned short min_distance;
        /**
         * Maximum distance the sensor can measure in centimeters.
         */
        unsigned short max_distance;
        /**
         * Relative angle offset of the 0-index element in the distances array. Value of 0 corresponds to forward. Positive is clockwise direction, negative is counter-clockwise.
         */
        float angle_offset;
      };
    };
  };
};

#endif
